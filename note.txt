/*****笔记******/
var u = navigator.userAgent;
var isiOS = !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/); //ios终端 
var isAndroid = u.indexOf('Android') > -1 || u.indexOf('Adr') > -1; //android终端 

typeof无法判断Function和Array,typeof在没有let的情况下使用十分安全，即使是一个未定义的变量也不会报错  Array.isArray(object)可以用来判断数组 返回布尔值

arr.push(arr2)组成一个二维数组

indexOf 数组字符串都能用

false == 0 或 “” == 0 返回的结果是true

立即执行函数里面 要想外部访问到需要在外部先定义全局变量，并且return。 若return 内部访问不到

for(var i=0; ab.push(i+=2)<max;); 快速生成一个等差、等比数组；push内部能接收算式也能接函数 max后面的分号必须加；

trim()只能去除首尾的空格， /\s+/g 用正则匹配所有的空格，然后用replace替换。

清空数组 用arr=[] 或 arr.length = 0;

0.1+0.2 === 0.3 //false  用tofixed指定小数位数

时钟补0 slice（-2）

safari浏览器下 若用事件委托 click将失效 需要给body元素添加cursor:point; 或者改为touchstart 移动端苹果手机

Array.from() 可以将类数组或字符串转换为数组；

iScroll必须通过window.onload中实例化，或者在事件中实例化。否则会有问题。

andriod机子input在focus状态内容会被压缩 （带有绝对定位的元素宽高保持不变），方法：判断是否是安卓机 获取屏幕高度，动态设置最外围包裹元素的高度即可

自定义checkbox/radio样式 可以使用checked伪类来实现 input始终隐藏； hover无法通过子级改变父级

table布局：1、父级display:table;border-spacing(每个子级之间的间距) 子级：diaplay:table-cell;width:等宽的话随意指定一个宽度即可，不指定宽度，将根据内容自适应；子级

变量不能删除，属性可以删除，例如： a = 10 可以看成是window.a = 10 可以认为是window的一个属性，可以删除.

transition:left 1s ease 0s;  如果0后面不加s 无法生效；

手机横竖屏时 优先监听resize,orientationchange有时候会发生错误

0.5px有些手机无法识别

省略号（1）：display: -webkit-box; -webkit-box-orient:vertical; -webkit-line-clamp:2; overflow:hidden;
省略号（2）：white-space: nowrap; overflow: hidden; text-overflow: ellipsis;


自定义checkbox/radio按钮的时候 按钮的标签必要放在input的后面；否则会失效  radio必须有一个共同的name

安卓机下若字体为粗体 会导致emoji表情无法显示；

（var snack = 'Meow Mix';

function getFood(food) {
    if (food) {
        var snack = 'Friskies';
        return snack;
    }
    return snack;
}

getFood(false); // undefined 作用域的一个坑 经常错）

-webkit-overflow-scrolling:touch; 让滚动具有惯性；

去除滚动条： ::-webkit-scrollbar{
 display: none;
}

倒影 .daoying {
    -webkit-box-reflect: below 0px
    -webkit-gradient(linear,
    left top,left bottom,
    from(rgba(0,0,0,0)),
    to(rgba(255,255,255,0.5)));
}

::-webkit-input-placeholder { /* WebKit browsers */
    color: #dbd6d4;
}

-webkit-tap-highlight-color:


Object.prototype.toString.call(array).slice(8, -1) ／／[object Array] 判断类型用的 